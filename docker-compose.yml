version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: arx-predict-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: arx_predict_db
      POSTGRES_USER: arx_user
      POSTGRES_PASSWORD: arx_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      # - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U arx_user -d arx_predict_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: arx-predict-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      # - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Express Server
  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: arx-predict-app
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     NODE_ENV: development
  #     PORT: 3000
  #     DATABASE_URL: postgresql://arx_user:arx_password@postgres:5432/arx_predict_db
  #     REDIS_URL: redis://redis:6379
  #     REDIS_HOST: redis
  #     REDIS_PORT: 6379
  #     # Add your actual API keys here or use .env file
  #     ABLY_API_KEY: ${ABLY_API_KEY:-your_ably_api_key_here}
  #     ABLY_APP_ID: ${ABLY_APP_ID:-your_ably_app_id_here}
  #     HELIUS_API_KEY: ${HELIUS_API_KEY:-your_helius_api_key_here}
  #     HELIUS_WEBHOOK_SECRET: ${HELIUS_WEBHOOK_SECRET:-your_webhook_secret_here}
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - arx-network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  # pgAdmin (Optional - Database management)
  # pgadmin:
  #   image: dpage/pgadmin4:latest
  #   container_name: arx-predict-pgadmin
  #   restart: unless-stopped
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@arx-predict.com
  #     PGADMIN_DEFAULT_PASSWORD: admin123
  #     PGADMIN_CONFIG_SERVER_MODE: 'False'
  #   ports:
  #     - "5050:80"
  #   volumes:
  #     - pgadmin_data:/var/lib/pgadmin
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - arx-network

  # Redis Commander (Optional - Redis management)
  # redis-commander:
  #   image: rediscommander/redis-commander:latest
  #   container_name: arx-predict-redis-commander
  #   restart: unless-stopped
  #   environment:
  #     REDIS_HOSTS: local:redis:6379
  #   ports:
  #     - "8081:8081"
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - arx-network

# volumes:
  # postgres_data:
  #   driver: local
  # redis_data:
  #   driver: local
  # pgadmin_data:
  #   driver: local

# networks:
#   arx-network:
#     driver: bridge
#     ipam:
#       config:
#         - subnet: 172.20.0.0/16
